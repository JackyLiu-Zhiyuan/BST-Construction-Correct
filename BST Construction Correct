class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        current = self
        while True:
            if value >= current.value:
                if current.right is None:
                    current.right = BST(value)
                    break
                else:
                    current = current.right
            else:
                if current.left is None:
                    current.left = BST(value)
                    break
                else:
                    current = current.left

    def contains(self, value):
        current = self
        while current is not None:
            if value == current.value:
                return True
            elif value > current.value:
                if current.right is None:
                    return False
                if current.right.value == value:
                    return True
                else:
                    current = current.right
            else:
                if current.left is None:
                    return False
                if current.left.value == value:
                    return True
                else:
                    current = current.left
        return False



    def remove(self, value, parentNode = None):
        currentNode = self
        while currentNode is not None:
            if value < currentNode.value:
                parentNode = currentNode
                currentNode = currentNode.left
            elif value > currentNode.value:
                parentNode = currentNode
                currentNode = currentNode.right
            else:
                if currentNode.left is not None and currentNode.right is not None:
                    currentNode.value = currentNode.right.getMinValue()
                    currentNode.right.remove(currentNode.value, currentNode)
                elif parentNode is None:
                    if currentNode.left is not None:
                        currentNode.value = currentNode.left.value
                        currentNode.right = currentNode.left.right
                        currentNode.left = currentNode.left.left
                    elif currentNode.right is not None:
                        currentNode.value = currentNode.right.value
                        currentNode.right = currentNode.right.right
                        currentNode.left = currentNode.right.left
                    else:
                        pass
                elif parentNode.left == currentNode:
                    parentNode.left = (currentNode.left if currentNode.left is not None else currentNode.right)
                elif parentNode.right == currentNode:
                    parentNode.right = (currentNode.left if currentNode.left is not None else currentNode.right)
                break
        return self











a = BST(10)
a.insert(5)
a.insert(15)
a.insert(12)
a.insert(13)
a.insert(17)


print(a.right.value)
print(a.contains(13))
# print(a.contains(5))
# b = BST(5)
# c = BST(15)
# d = BST(2)
# e = BST(5)
# f = BST(13)
# g = BST(22)
# h = BST(1)
# i = BST(14)
# a.left = b
# a.right = c
# b.left = d
# b.right = e
# d.left = h
# c.left = f
# c.right = g
# f.right = i

